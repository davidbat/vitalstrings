Time spent in forums: 3 h 16 m 3 sec
Reputation Power: 0
I have completely rewritten my insert function, which has removed all bus errors. I now however cannot tell if either my print function is wrong, or the insert function isnt completely right as printing prints 15.000000 twice and that's it....
Code:
#include "matrix.h" #include <stdio.h> #include <stdlib.h> #include <string.h> void initializeMatrix(Matrix** M, long* dimension, FILE* in) {  (*M)->rowList = (Node**)malloc(*dimension*sizeof(Node*));  (*M)->columnList = (Node**)malloc(*dimension*sizeof(Node*));  int i;  for (i=0; i<*dimension; i++) {   (*M)->rowList[i] = NULL;   (*M)->columnList[i] = NULL;  }  } void insertNode(Matrix** M, long row_index, long column_index, double value) {  Node* ptr = (Node*)malloc(sizeof(Node));   ptr->value = value; /* initialize all properties of node */  ptr->rowIndex = row_index;  ptr->columnIndex = column_index;  if ((*M)->rowList[row_index] == NULL) { /* index is empty */   ptr->rowPtr = NULL;   (*M)->rowList[row_index] = ptr;  }  if ((*M)->columnList[column_index] == NULL) {    ptr->colPtr = NULL;   (*M)->columnList[column_index] = ptr;  }  if ((*M)->rowList[row_index]->columnIndex > column_index) { /* insert node to front */   ptr->colPtr = (*M)->rowList[row_index];   (*M)->rowList[row_index] = ptr;  }  if ((*M)->columnList[column_index]->rowIndex > row_index) {    ptr->rowPtr = (*M)->rowList[row_index];   (*M)->columnList[column_index] = ptr;  }  if ((*M)->rowList[row_index]->columnIndex < column_index) { /* insert node in order */   Node* rowptr = (Node*)malloc(sizeof(Node));   rowptr = (*M)->rowList[row_index];   while (rowptr->colPtr != NULL && rowptr->columnIndex < column_index) {    rowptr = rowptr->colPtr;   }   if (rowptr->colPtr == NULL) {    rowptr->colPtr = ptr;    free(rowptr);   }   else { /* node already exists */    printf("Node already exists!");    free(ptr);    free(rowptr);   }  }  if ((*M)->columnList[column_index]->rowIndex < row_index) {   Node * colptr = (Node*)malloc(sizeof(Node));   colptr = (*M)->columnList[column_index];   while (colptr->rowPtr != NULL && colptr->rowIndex < row_index) {    colptr = colptr->rowPtr;   }   if (colptr->rowPtr == NULL) {    colptr->rowPtr = ptr;    free(colptr);   }   else { /* Node already exists! */    printf("Node already exists!");    free(ptr);    free(colptr);   }  } } void printSubMatrix(Matrix* M, long beginrow, long endrow, long begincol, long endcol) {  long i = beginrow;  Node* ptr = (Node*)malloc(sizeof(Node));  ptr->columnIndex = begincol;  for (i; i<endrow; i++) {   printf("\n");   if (M->rowList[i] != NULL) {    ptr = M->rowList[i];    while (ptr->columnIndex <= endcol) {     printf("%lf ", ptr->value);     ptr = ptr->colPtr;    }   }  }  free(ptr); }
strakerc
