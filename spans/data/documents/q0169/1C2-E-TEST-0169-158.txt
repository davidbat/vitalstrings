Time spent in forums: 22 h 38 m 31 sec
Reputation Power: 6
all errors i found are commented
biggest probs:
string is in std namespace
member functions declared outside of a class must be prefixed with CLASSNAME::
Code:
// mnode.cpp : Defines the entry point for the console application. //  #include "stdafx.h" #include <string> using namespace std; // class string is in std namespace  // you don't need to declare the matrix class here because you prototyped everything (and you would need a semicolon)  class mnode { public:       mnode(int i, int j,float item=0,mnode* rightPtr=NULL,mnode* downPtr=NULL);     /*        purpose: to create a node to represent the (i,j)th entry of the          sparse matrix.        parameters:          i -- the row # of the matrix entry.          j -- the column # of the matrix entry.          item -- the value of the (i,j)th entry.          rightPtr -- pointer to the next column.          downPtr -- pointer to the next row.        requirement: both i and j must be non-negative.        promise: to create the (i,j)th matrix entry.          If i is zero, then it is the header node for the jth column.          If j is zero, then it is the header node for the ith column.          If both i and j are zero, then it is the unique head for the matrix.             */            mnode* next(const string& specific) const;     /*         purpose: get the next row or column node.        promise: if specific = "right", return the next column node.          If specific = "down", return the next row node.        exceptions: wrongData -- if specific is not "right" or "down".     */         float& nodeData(); // const - return can't be constant if data isn't constant     /*        purpose: to get the stored matrix data/entry.        parameters: none.        requirement: none.        promise: return the stored data.        exceptions: none.     */           int nodeIndex(const string& specific) const;     /*         purpose: to get the row or column index of the node.        promise: if specific = "row", return the row index of this node.          If specific = "column", return the column index of this node.*/          void set(const string& specific, mnode* aNode);     /*         purpose: set the next row or column pointer.        promise: if specific = "right", set the next column node.          If specific = "down", set the next row node.             */   private:     int row;     int col;         float  data;         mnode* right;         mnode* down; };  typedef mnode* rMnode;   //------IMplementation mnode.h------------------------------ mnode::mnode( int i, int j, float item,mnode* rightPtr, mnode* downPtr) // mnode:: you need to declare it a member of mnode {           data = item; // item=data would effectivly do nothing           row=i;           col=j;     right = rightPtr; // you need 2 set the object's variables - not the variables that were passed in     down = downPtr; // same as last line }  mnode* mnode::next(const string & specific) const // mnode:: you need to declare it a member of mnode {                   if(specific=="right") // you need == not =             return right;          if(specific=="down") // same             return down;          //execption }            // ::mnode you need to declare it a member of mnode float& mnode::nodeData() // const - return can't be constant if data isn't constant {          return data; }  int mnode::nodeIndex(const string & specific) const // mnode:: you need to declare it a member of mnode {        if(specific=="row") // same           return row;        if(specific=="col") // same           return col;        // you need to catch exceptions here too }  void mnode::set( const string & specific, mnode* aNode) // mnode:: you need to declare it a member of mnode {      if(specific=="right") // same         aNode= aNode->right;      if(specific=="down") // same          aNode=aNode->down;      // exception }  //--------------class matrix-----------------------  //#include "mnode.h" class matrix { public:     matrix(float* a, int n, int m);     /*        purpose: to create a nXm sparse matrix.        parameters:          a -- the pointer to the array of floating-point numbers               representing the full (all numbers including zeroes)               nXm matrix in row-major order.          n -- the number of rows in the matrix.          m -- the number of columns in the matrix.        requirement: both n and m are positive integers.        promise: to create the sparse matrix using the mnode as discussed          in class.  If a is the NULL pointer, the nXm zero matrix (all          matrix entries are zeroes) is created.        exceptions:          wrongData -- if either n and/or m is not a positive integer.     */     void display() const;     /*        purpose: output the full matrix in a nice/formatted manner.          parameters: none.        requirement: none.        promise: output the full (including zero entries) matrix.        exceptions: none.     */   private:     int row, col;     rMnode head; };
meandro
