and we represent it through it transpose. In sparse form it would be
v_Anz:  3 1 0
v_Col:  2 4 0
In the case when v is dense, we use the elements in A_Col to do a gather of the elements of v_Anz.
But now this is not possible.
We still want to create an array of values, the same size as A_Anz so that afterwards we can do a simple element-wise multiplication and reduction.
What we need to do is a "preprocessing" where we find the position of the elements of A_col in v_Col and record them.
The result of such operation in this case would be
0 2 0  0 0 2  1 0 0  2 0 0
A value of 0 indicates that the value at that position in A_col was not found in v_Col
Once we have this array, we can use it to do a gather in v_Anz. This should give the following result
0 1 0  0 0 1  3 0 0  1 0 0
Finally, we perform an element-wise multiplication of this last array with A_Anz to obtain:
0 3 0  0 0 9  12 0 0  5 0 0
Performing a reduction over MAX_NZ_PER_ROW elements, we get the final result the product A*v
A*v = [3 9 12 5]  (this would actually be a column vector)
My problem is, how to implement the preprocessing step of looking for the elements of an array in another array?
Is this an operation that can be done in the GPU? What about using Brook?
An alternative, of course, would be to expand the vector v from its sparse form to a dense form. That is, if we somehow have obtained the vector v in its sparse form, then we could write it into a stream with its "dense size", having all the necessary zeroes. Then we could just use the algorithm for matrix-vector multiplication.
However, I am thinking of matrix-matrix multiplication, so this transformation should be done to all the columns in the right matrix.
Also, in the cases I am considering the number of non-zero entries is at least 1 order of magnitude smaller than the number of rows in the right matrix, so I am worried about the problems of expanding the columns so much.
I would appreciate any ideas or suggestions to help with this problem.
Thank you
