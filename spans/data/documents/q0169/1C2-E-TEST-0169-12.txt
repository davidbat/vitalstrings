4)
Diagonal Storage Format
If the sparse matrix has diagonals containing only zero elements, then the diagonal storage format can be used to reduce the amount of information needed to locate the non-zero elements. This storage format is particularly useful in many applications where the matrix arises from a finite element or finite difference discretization. The Intel MKL diagonal storage format is specified by two arrays: values and distance, and two parameters: ndiag, which is the number of non-empty diagonals, and lval, which is the declared leading dimension in the calling (sub)programs. The following table describes the arrays values and distance:
values
A real or complex two-dimensional array is dimensioned as lval by ndiag. Each column of it contains the non-zero elements of certain diagonal of A. The key point of the storage is that each element in values retains the row number of the original matrix. To achieve this diagonals in the lower triangular part of the matrix are padded from the top, and those in the upper triangular part are padded from the bottom. Note that the value of distance(I) is the number of elements to be padded for diagonal I.
distance
An integer array with dimension ndiag. Element I of the array distance is the distance between I-diagonal and the main diagonal. The distance is positive if the diagonal is above the main diagonal, and negative if the diagonal is below the main diagonal. The main diagonal has a distance equal to zero.
The above matrix C can be represented in the diagonal storage format as follows:
where the asterisks denote padded elements.
When storing symmetric, Hermitian, or skew-symmetric matrices, it is necessary to store only the upper or the lower triangular part of the matrix.
For the Intel MKL triangular solver routines elements of the array distance must be sorted in increasing order. In all other cases the diagonals and distances can be stored in arbitrary order.
Skyline Storage Format
The skyline storage format is important for the direct sparse solvers, and it is well suited for Cholesky or LU decomposition when no pivoting is required.
The skyline storage format accepted in Intel MKL can store only triangular matrix or triangular part of a matrix. This format is specified by two arrays: values and pointers. The following table describes these arrays:
values
A scalar array. For a lower triangular matrix it contains the set of elements from each row of the matrix starting from the first non-zero element to and including the diagonal element. For an upper triangular matrix it contains the set of elements from each column of the matrix starting with the first non-zero element down to and including the diagonal element. Encountered zero elements are included in the sets.
pointers
An integer array with dimension
(m+1)
, where m is the number of rows for  lower triangle (columns for the upper triangle).
pointers(I) - pointers(1)+1
gives the index of element in values that is first non-zero element in row (column) I. The value of
pointers(m+1)
nz+pointers(1)
, where nnz is the number of elements in the array values.
For example, the low triangle of the matrix C given above can be stored as follows: values =  ( 1   -2   5   4   -4   0   2   7   8   0   0   -5 )
pointers = ( 1   2   4   5   9   13 )
and the upper triangle of this matrix C can be stored as follows: values = ( 1   -1   5   -3   0   4   6   7  4   0   -5 )
pointers = ( 1   2   4   7   9   12 )
This storage format is supported by the NIST Sparse BLAS library [ Rem05 ].
Note that the Intel MKL Sparse BLAS routines operating with the skyline storage format does not support general matrices.
BSR Format
The Intel MKL block compressed sparse row (BSR) format for sparse matrices is specified by four arrays: values, columns, pointerB, and pointerE. The following table describes these arrays.
values
A real array that contains the elements of the non-zero blocks of a sparse matrix. The elements are stored block-by-block in row-major order.  A non-zero block is the block that contains at least one non-zero element. All elements of non-zero blocks are stored, even if some of them is equal to zero. Within each non-zero block  elements are stored in column-major order in the case of  one-based indexing, and in row-major order in the case of the zero-based indexing.
columns
Element I of the integer array columns is the number of the column in the block matrix that contains the I-th non-zero block.
pointerB
Element j of this integer array gives the index of the element in the columns array that is first non-zero block in a row j of the block matrix.
pointerE
Element j of this integer array gives the index of the element in the columns array that contains the last non-zero block in a row j of the block matrix plus 1.
The length of the values array is equal to the number of all elements in the non-zero blocks, the length of the columns array is equal to the number of non-zero blocks. The length of the pointerB and pointerE arrays is equal to the number of block rows in the block matrix.
Note
Note that the Intel MKL Sparse BLAS routines support BSR format both with one-based indexing and zero-based indexing.
For example, consider the sparse matrix D
If the size of the block equals 2, then the sparse matrix D can be represented as a 3x3 block matrix E with the following structure:
where
The matrix D can be represented in the BSR format as follows:
one-based indexing values =  (1 2 0 1 6 8 7 2 1 5 4 1 4 0 3 0 7 0 2 0)
columns = (1   2   2   2   3)
pointerB = (1   3   4)
pointerE = (3   4   6)
zero-based indexing values =  (1 0 2 1 6 7 8 2 1 4 5 1 4 3 0 0 7 2 0 0)
columns = (0   1   1   1   2)
pointerB = (0   2   3)
pointerE = (2   3   5)
This storage format is supported by the NIST Sparse BLAS library [ Rem05 ].
Intel MKL supports the  variation of the BSR format that is specified by three arrays: values, columns, and rowIndex. The following table describes these arrays.
values
A real array that contains the elements of the non-zero blocks of a sparse matrix. The elements are stored block by block in row-major order.  A non-zero block is the block that contains at least one non-zero element. All elements of non-zero blocks are stored, even if some of them is equal to zero. Within each non-zero block the elements are stored in column major order in the case of  the one-based indexing, and in row major order in the case of the zero-based indexing.
columns
Element I of the  integer array columns is the number of the column in the block matrix that contains the I-th non-zero block.
rowIndex
Element j of this integer array gives the index of the element in the columns array that is first non-zero block in a row j of the block matrix.
The length of the values array is equal to the number of all elements in the non-zero blocks, the length of the columns array is equal to the number of non-zero blocks.
As the rowIndex array gives the location of the first non-zero block  within a row, and the non-zero blocks are stored consecutively, the number of non-zero blocks in the I-th row is equal to the difference of
rowIndex(I)
rowIndex(I+1)
.
To retain this relationship for the last row of the block matrix, an additional entry (dummy entry) is added to the end of rowIndex with value equal to the number of non-zeros blocks plus one. This makes the total length of the rowIndex array one larger than the number of rows of the block matrix.
The above matrix D can be represented in this 3-array variation of the BSR format as follows:
one-based indexing values =  (1 2 0 1 6 8 7 2 1 5 4 2 4 0 3 0 7 0 2 0)
columns = (1   2   2   2   3)
rowIndex = (1   3   4   6)
zero-based indexing values =  (1 0 2 1 6 7 8 2 1 4 5 1 4 3 0 0 7 2 0 0)
columns = (0   1   1   1   2)
rowIndex = (0   2   3 5)
When storing symmetric matrices, it is necessary to store only the upper or the lower triangular part of the matrix.
For example, consider the symmetric sparse matrix F:
If the size of the block equals 2, then the sparse matrix F can be represented as a 3x3 block matrix G with the following structure:
where
The symmetric matrix F can be represented in this 3-array variation of the BSR format (storing only upper triangular) as follows:
one-based indexing values =  (1 2 0 1 6 8 7 2 1 5 4 2 7 0 2 0)
columns = (1   2   2   3)
rowIndex = (1   3   4 5)
zero-based indexing values =  (1 0 2 1 6 7 8 2 1 4 5 2 7 2 0 0)
columns = (0   1   1   2)
rowIndex = (0   2   3 4)
