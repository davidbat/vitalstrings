)
¶
Computes the transposed sparse matrix-vector product \(\mathbf{y} := \mathbf{A}^T \mathbf{x}\) where \(\mathbf{x}\) and \(\mathbf{y}\) are double precision, rank-1 NumPy arrays of appropriate size. For sss_mat objects matvec_transp is equivalent to matvec.
Example: 2D-Poisson matrix ¶
This section illustrates the use of the spmatrix module to build the well known 2D-Poisson matrix resulting from a \(n \times n\) square grid:
from pysparse.sparse import spmatrix def poisson2d(n): n2 = n*n L = spmatrix.ll_mat(n2, n2, 5*n2-4*n) for i in range(n): for j in range(n): k = i + n*j L[k,k] = 4 if i > 0: L[k,k-1] = -1 if i < n-1: L[k,k+1] = -1 if j > 0: L[k,k-n] = -1 if j < n-1: L[k,k+n] = -1 return L
Using the symmetric variant of the ll_mat object, this gets even shorter:
def poisson2d_sym(n): n2 = n*n L = spmatrix.ll_mat_sym(n2, 3*n2-2*n) for i in range(n): for j in range(n): k = i + n*j L[k,k] = 4 if i > 0: L[k,k-1] = -1 if j > 0: L[k,k-n] = -1 return L
To illustrate the use of the slice notation to address sub-matrices, let’s build the 2D Poisson matrix using the diagonal and off-diagonal blocks:
def poisson2d_sym_blk(n): n2 = n*n L = spmatrix.ll_mat_sym(n2, 2*n2-2*n) I = spmatrix.ll_mat_sym(n, n) P = spmatrix.ll_mat_sym(n, 2*n-1) for i in range(n): I[i,i] = -1 for i in range(n): P[i,i] = 4 if i > 0: P[i,i-1] = -1 for i in range(0, n*n, n): L[i:i+n,i:i+n] = P if i > 0: L[i:i+n,i-n:i] = I return L
Vectorization ¶
The put method of ll_mat objects allows us to operate on entire arrays at a time. This is advantageous because the loop over the elements of an array is performed at C level instead of in the Python script.
If you need to put the same value in many places, put lets you specify this value as a floating-point number instead of an array, e.g.:
A.put(4.0, range(n), range(n))
is perfectly equivalent to:
A.put(4*numpy.ones(n), range(n), range(n))
Moreover, if the second index set is omitted, it defaults to range(n) where n is the appropriate matrix dimension. So the above is again perfectly equivalent to:
A.put(4.0, range(n))
For illustration, let’s rewrite the poisson2d, poisson2d_sym and poisson2d_sym_blk constructors.
The put method can be used in poisson2d as so:
from pysparse.sparse import spmatrix import numpy def poisson2d_vec(n): n2 = n*n L = spmatrix.ll_mat(n2, n2, 5*n2-4*n) d = numpy.arange(n2, dtype=numpy.int) L.put(4.0, d) L.put(-1.0, d[:-n], d[n:]) L.put(-1.0, d[n:], d[:-n]) for i in xrange(n): di = d[i*n:(i+1)*n] L.put(-1.0, di[1:], di[:-1]) L.put(-1.0, di[:-1], di[1:]) return L
And similarly in the symmetric version:
def poisson2d_sym_vec(n): n2 = n*n L = spmatrix.ll_mat_sym(n2, 3*n2-2*n) d = numpy.arange(n2, dtype=numpy.int) L.put(4.0, d) L.put(-1.0, d[n:], d[:-n]) for i in xrange(n): di = d[i*n:(i+1)*n] L.put(-1.0, di[:-1], di[1:]) return L
The time differences to construct matrices with and without vectorization can be dramatic. The following timings were generated on a 2.4GHz Intel Core2 Duo processor:
In [1]: from pysparse.tools import poisson, poisson_vec In [2]: %timeit -n10 -r3 L = poisson.poisson2d(100) 10 loops, best of 3: 38.2 ms per loop In [3]: %timeit -n10 -r3 L = poisson_vec.poisson2d_vec(100) 10 loops, best of 3: 4.26 ms per loop In [4]: %timeit -n10 -r3 L = poisson.poisson2d(300) 10 loops, best of 3: 352 ms per loop In [5]: %timeit -n10 -r3 L = poisson_vec.poisson2d_vec(300) 10 loops, best of 3: 31.7 ms per loop In [6]: %timeit -n10 -r3 L = poisson.poisson2d(500) 10 loops, best of 3: 980 ms per loop In [7]: %timeit -n10 -r3 L = poisson_vec.poisson2d_vec(500) 10 loops, best of 3: 86.4 ms per loop In [8]: %timeit -n10 -r3 L = poisson.poisson2d(1000) 10 loops, best of 3: 4.02 s per loop In [9]: %timeit -n10 -r3 L = poisson_vec.poisson2d_vec(1000) 10 loops, best of 3: 333 ms per loop
and for the symmetric versions:
In [18]: %timeit -n10 -r3 L = poisson.poisson2d_sym(100) 10 loops, best of 3: 22.6 ms per loop In [19]: %timeit -n10 -r3 L = poisson_vec.poisson2d_sym_vec(100) 10 loops, best of 3: 2.48 ms per loop In [20]: %timeit -n10 -r3 L = poisson.poisson2d_sym(300) 10 loops, best of 3: 202 ms per loop In [21]: %timeit -n10 -r3 L = poisson_vec.poisson2d_sym_vec(300) 10 loops, best of 3: 20 ms per loop In [22]: %timeit -n10 -r3 L = poisson.poisson2d_sym(500) 10 loops, best of 3: 561 ms per loop In [23]: %timeit -n10 -r3 L = poisson_vec.poisson2d_sym_vec(500) 10 loops, best of 3: 53.8 ms per loop In [24]: %timeit -n10 -r3 L = poisson.poisson2d_sym(1000) 10 loops, best of 3: 2.26 s per loop In [25]: %timeit -n10 -r3 L = poisson_vec.poisson2d_sym_vec(1000) 10 loops, best of 3: 205 ms per loop
From these numbers, it is obvious that vectorizing is crucial, especially for large matrices. The gain in terms of time seems to be a factor of at least four or five. Note that the last system has order one million.
Finally, the block version could be written as:
def poisson2d_vec_sym_blk(n): n2 = n*n L = spmatrix.ll_mat_sym(n2, 3*n2-2*n) D = spmatrix.ll_mat_sym(n, 2*n-1) d = numpy.arange(n, dtype=numpy.int) D.put(4.0, d) D.put(-1.0, d[1:], d[:-1]) P = spmatrix.ll_mat_sym(n, n-1) P.put(-1,d) for i in xrange(n-1): L[i*n:(i+1)*n, i*n:(i+1)*n] = D L[(i+1)*n:(i+2)*n, i*n:(i+1)*n] = P # Last diagonal block L[-n:,-n:] = D return L
Here, put is sufficiently efficient that the benefit of constructing the matrix by blocks is not apparent anymore. The slicing and block notation can nevertheless be used for clarity. It could also be implemented as a combination of find and put, at the expense of memory consumption.
In [9]: %timeit -n10 -r3 L = poisson.poisson2d_sym_blk(1000) 10 loops, best of 3: 246 ms per loop In [10]: %timeit -n10 -r3 L = poisson_vec.poisson2d_sym_blk_vec(1000) 10 loops, best of 3: 232 ms per loop
Matlab Implementation ¶
Let’s compare the performance of three python codes above with the following Matlab functions:
The Matlab function poisson2d is equivalent to the Python function with the same name
function L = poisson2d(n) L = sparse(n*n); for i = 1:n for j = 1:n k = i + n*(j-1); L(k,k) = 4; if i > 1, L(k,k-1) = -1; end if i < n, L(k,k+1) = -1; end if j > 1, L(k,k-n) = -1; end if j < n, L(k,k+n) = -1; end end end
The function poisson2d_blk is an adaption of the Python function poisson2d_sym_blk (except for exploiting the symmetry, which is not directly supported in Matlab).
function L = poisson2d_blk(n) e = ones(n,1); P = spdiags([-e 4*e -e], [-1 0 1], n, n); I = -speye(n); L = sparse(n*n); for i = 1:n:n*n L(i:i+n-1,i:i+n-1) = P; if i > 1, L(i:i+n-1,i-n:i-1) = I; end if i < n*n - n, L(i:i+n-1,i+n:i+2*n-1) = I; end end
The function poisson2d_kron demonstrates one of the most efficient ways to generate the 2D Poisson matrix in Matlab.
function L = poisson2d_kron(n) e = ones(n,1); P = spdiags([-e 2*e -e], [-1 0 1], n, n); L = kron(P, speye(n)) + kron(speye(n), P);
The Matlab functions above were place in a Matlab script names poisson.m which takes n as argument. It then calls poisson2d, poisson2d_blk and poisson2d_kron successively, surrounding each call by tic and toc. The tests were performed on a 2.4GHz Intel Core2 Duo running Matlab 7.6.0.324 (R2008a).
The results are as follows:
>> poisson(100) poisson2d      Elapsed time is 1.731940 seconds. poisson2d_blk  Elapsed time is 0.804837 seconds. poisson2d_kron Elapsed time is 0.019118 seconds. >> poisson(300) poisson2d      Elapsed time is 145.979044 seconds. poisson2d_blk  Elapsed time is 32.785585 seconds. poisson2d_kron Elapsed time is 0.215165 seconds. >> poisson(500) poisson2d      Elapsed time is 2318.512099 seconds. poisson2d_blk  Elapsed time is 292.355093 seconds. poisson2d_kron Elapsed time is 0.627137 seconds. >> poisson(1000) poisson2d_kron Elapsed time is 2.317660 seconds.
It is striking to see how slow the straightforward poisson2d version is in Matlab. As we see in the next section, the Python version is faster by several orders of magnitude.
Comparison with Matlab ¶
First, consider the simple Poisson2D function. The table below summarizes the results of the previous section by giving timing ratios between the Python and Matlab Poisson constructors.
Matlab vs. Python: Construction of 2D Poisson matrices.
n
