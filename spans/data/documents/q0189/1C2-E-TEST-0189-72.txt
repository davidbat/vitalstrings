Closed)
If you have ever been interested in writing your own applications for Mac OS X, read Justin Williams' getting started guide for new developers.  He will outline a brief history of Mac development, lay out what options you have, and then set you on the right path to developer enlightenment.
A request we have gotten a few times in our inbox concerns how to develop software for the Mac.  Usually the person writing is a switcher from the Windows world who has dabbled in Basic, C# or maybe some C++.  Once they get their first Macintosh, they realize that they can't use Visual Studio on the Mac, and pretty much have to start over.
Others are people that have no experience with programming or development but are interested in exploring a new area.  A Google search can be intimidating.  Opening Xcode for the first time can be as well.
This article is meant to be a general overview of the Mac development environment.  I want to explain what some of your options are, how to get started, and where to look for help.  I won't be explaining Objective-C syntax, reference counting or any other type of specific programming topics.  There are plenty of other great resources out there that can do a far better job at that.  I'll link to those later in the article.
Why Develop On The Mac?
Before we begin, let's examine why anyone would even want to develop for the Mac platform.  It's less than 5% of all computers, after all.
Back in 2001, Apple released Mac OS X.  The interface and user experience of OS X was a major departure from Macs of the past; the same could be said for the Mac development environment.  Most of the code written for pre-OS X systems was obsolete and would need to be ported or completely rewritten for Mac OS X.  At the time, it was frustrating, but it solved a lot of problems with Mac development.
Way back in 1984 when Apple released the first Macintosh, it created the Toolbox.  The Toolbox was a set of resources, drivers and APIs that allowed developers to create Mac software.  It was in charge of the menus, events, windows and pretty much everything else involved in creating applications.  As the Mac matured and its OS grew over the years, Apple kept upgrading the Toolbox.  Fast forward fifteen years, and Apple is still using the Toolbox.  As you can imagine, after over fifteen years, it had become somewhat unruly.
With OS X, Apple was given a clean slate.  The Toolbox was no longer in use.  Instead, Apple used the technology it inherited from Steve Jobs' NeXT, which is also the muscle behind OS X.  These technologies make it much easier for new developers to get their feet wet in OS X development.
Apple also makes it easy to get started because each copy of Mac OS X has included a copy of the developer tools.  Apple did this to help draw developers to the platform.  With Microsoft, you have to pay to make software, but not with OS X.  Instead, you are given a fully functional development environment free of charge.  Apple's thinking was if you make the barrier to entry minor, it will bring in more people.
What it all comes down to is that developing on the Mac is fun and innovative.  It requires you to use both sides of your brain.  Windows and Linux there is little to no thought put into how an application looks and functions; that is an integral part of the Mac development process.  It's not uncommon for developers to spend days or weeks slaving over their interface making sure it is perfect.
That's where Mac and Windows developers will never see eye to eye.
Experience Required?
Many beginners want to know if they need any experience to begin developing software in Mac OS X.  I usually tell them that knowing the basics of programming in general is a good foundation, but they don't need a deep understanding of C or C++ to become a successful programmer.  More important than that is understanding the underlying foundations of good programming practice.
You can gain that from almost any programming language.  I knew C before I moved to OS X and had done several projects in PHP and Perl as well, but knew nothing about C++, Java or anything object-oriented for that matter.  I learned it as I went.  Some may disagree with this practice and insist you get a good foundation in C and objects before even touching code, but I believe more in trial and error than theory.
Depending on the route you take in development, there are different resources you can reference.
A Fork In The Road
If you want to develop for Mac OS X, there are three routes you can take.  Technically there is a fourth in AppleScript , but my thoughts about AppleScript Studio are inline with its acronym.  The first one that is not commonly used anymore is Carbon .  Carbon was created as a bridge between Classic and Mac OS X.  Carbon supports about 70% of the classic Mac OS APIs and then adds new OS X specific APIs.  While there is nothing wrong with developing with Carbon, I wouldn't recommend it for new Mac developers.  While you may need to use some Carbon in your applications, I think all new Mac developers should use Cocoa.  You can develop applications in Carbon without any problem (OS X's Finder is Carbon for example), but Cocoa is "the" language for OS X in terms of new development.  That's my opinion at least.  Development with Carbon involves much more heavy lifting in terms of learning and work compared to Cocoa as well.
Another option would be the cross-platform Java language.  Java is taught now in many college classrooms because it teaches good object-oriented principles.  Java also has the promise of write once. run anywhere.  This is not necessarily true if you are developing native OS X applications though.  Java can take advantage of the Cocoa frameworks, but your application will run slower than if you are using Objective-C and you can't take advantage of all of the niceties of Cocoa: bindings anyone?
The final topic, and the one that this article will cover the most is Cocoa .  Cocoa is an object-oriented set of frameworks made exclusively for OS X development.  Cocoa is accessed mainly via Objective-C, a small extension of the C programming language.  Cocoa is the development language of choice for OS X in terms of innovation and groundbreaking new features like bindings and Core Data.  At a high level, Cocoa is two frameworks: Foundation and Application Kit .  These are the two base frameworks that are required of all Cocoa applications.
Foundation is the base layer of classes used.  As its name suggests, it provides the foundation for which all Cocoa apps are built upon: object behaviors, memory management, notifications, persistence and other OS-centric behaviors.  Application Kit, on the other hand, is in charge of the graphical interface for your application.  When you are working in Interface Builder, you are dealing with Application Kit features.  Hand-in-hand, these two frameworks make it easy to get started in Mac OS X development.
Cocoa also let's you take advantage of the coolest technology to hit Mac OS X developers in ages: Cocoa Bindings .  Bindings let you elimate a lot of the "glue" code that keeps your application together.  For example, prior to Bindings, developers had to implement several methods in order to get a simple table view or outline view to function in Cocoa.  With bindings, a few connections in Interface Builder let you bind your model class to your application's interface.  You will want to learn more about bindings.
The only caveat to Cocoa development is that you will need to learn a new syntax: Objective-C.  Developed in the 80's by Brad Cox, Objective-C is an extension of the C programming language.  It is a very thin layer that is on top of C.  This means that you can compile any C program with an Objective-C compiler.
Learning Objective-C is nothing too difficult.  You can pick it up in an afternoon if you have experience with C.  Teaching you the language is beyond the scope of this article.  As we go along, I will list a few resources that can help you get started.
Tools of the Trade
Like any good craftsman, you are only as good as your tools.  Luckily, Apple has bundled an excellent set of tools for OS X developers to take advantage of.  At the center of it all is Xcode.  Xcode is the dashboard of development allowing you to write code, model your data, compile and debug your code.  As a Mac developer, you will spend most of your time in this application.
Xcode has several features that make it so great.  One of these is Fix and Continue.  Using this feature, you can make modifications to a running application while you are debugging it without having to recompile.  On larger projects this can be a major time saver.
Fix and Continue is made possible by another Xcode feature called ZeroLink.  Normally, when you compile an application it will compile the source files into object files and then link them using a linker of some type.  Using ZeroLink, Xcode skips the linking step at compile time and instead creates a small stub that does all the linking as the application is running.
Xcode also includes distributive building which lets you push some of the workload of compilation off onto idle Macs on your network.  Using Bonjour, Xcode will search for other Macs on your network that have Xcode launched and will use their processing power to help compile your application.  This can save you time when compiling your application because you will be using the collective power of multiple machines instead of a single one.
As I said, Xcode deals with the source code of your Mac OS X application.  Interface Builder is in charge of designing and testing your application's user interface.
Interface Builder lets you drag and drop controls on your application's windows and arrange them as you see fit.  It will also help you follow Apple's Human Interface Guidelines, a document that establishes how a Mac application should look and function.  IB will put guidelines on the screen to help you space your interface's controls in adherence with the HIG.
Interface Builder is also where you connect your application to the classes you create in Xcode.  This simply involves dragging a line from your instantiated class to the control.  You can also subclass your objects and establish default values from within the application.
The great thing about developing on OS X is that all of these technologies take advantage of Unix behind the curtain.  Apple knew it didn't need to reinvent the wheel in terms of writing its own compiler, so it began to work with open source projects to use their tools.  When you are compiling your code in Xcode, you are most likely using the gcc compiler that has been in development for decades.  When you are debugging your application, you are using gdb, another open source project.
You can run all of these open source applications from the command line, but Xcode harnesses their power in an easy-to-use graphical interface, so why would you want to?
The Starting Line
Now that we have established what options there are in terms of developing for Mac OS X and the tools we can use, you are probably wondering where to even start.  If you do a quick Google search on Cocoa or visit the ADC website, the results can be dauting.  I think there are three key steps to becomming a successful Mac programmer.  You first need to learn the language you are using.  Next, you need to master your tools.  Finally, you need to use your skills and just make something.  There is no 100% correct way to reach OS X development enlightenment, but you will definitely need to get a good foundation in your base programming language.
For Cocoa programmers, that language is Objective-C.
Step 1: Become An Objective-C Jedi
If you have no knowledge of C whatsoever, you should take a step back first.  In my opinion, you don't need a deep understanding of C to understand Objective-C, but you do need to know just a little bit.  Scott Stevenson of CocoaDevCentral wrote an excellent tutorial that will teach you just enough C to be able to function as a Cocoa developer.  Scott covers C syntax, the gcc compiler, typed variables, function prototypes, and several other topics.
C Language Tutorial for Cocoa
You can pick up Objective-C's syntax in an afternoon.  This is assuming you already have experience in another programming language.  Most programming languages make extensive use of curly braces, but Objective-C is the land of the square-bracket.  Let's look at a bit of sample code from one of my applications.
-(NSArray *) names {   NSMutableArray *array = [NSMutableArray array];     NSEnumerator *enumerator  = [[self exporterArray] objectEnumerator];     COExporter    *currentExporter = nil;      while (currentExporter = [enumerator nextObject])       [array addObject:[currentExporter name]];      return array;   }
Like I said, Objective-C is a little bit different in terms of syntax.  If you understand programming in any language, you should be able to decipher this code from its variable types and methods.  Apple has a great book on the Objective-C language that any new Cocoa developer should become familiar with.  It will not only explain syntax, but Objective-c specific feaures such as categories.
ADC - The Objective-C Programming Language
With a solid foundation in the language, you can start learning about the various Cocoa classes.  Become familiar with the methods and features of some of the frequently used classes.  This is just a small sampling, but its' a good starting point.
