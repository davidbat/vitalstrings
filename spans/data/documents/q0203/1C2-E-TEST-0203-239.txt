An introduction to the garbage-collected <br>heap of the Java virtual machine
By Bill Venners, JavaWorld.com, 08/01/96
Print
. What's this?
Welcome to another installment of "Under The Hood." This column gives Java developers a glimpse of what is going on underneath                            their running Java programs. This month's article takes a look at the garbage-collected heap of the Java virtual machine (JVM).
The JVM's heap stores all objects created by an executing Java program. Objects are created by Java's "new" operator, and                               memory for new objects is allocated on the heap at run time. Garbage collection is the process of automatically freeing objects                               that are no longer referenced by the program. This frees the programmer from having to keep track of when to free allocated                               memory, thereby preventing many potential bugs and headaches.
The name "garbage collection" implies that objects that are no longer needed by the program are "garbage" and can be thrown                               away. A more accurate and up-to-date metaphor might be "memory recycling." When an object is no longer referenced by the program,                               the heap space it occupies must be recycled so that the space is available for subsequent new objects. The garbage collector                               must somehow determine which objects are no longer referenced by the program and make available the heap space occupied by                               such unreferenced objects. In the process of freeing unreferenced objects, the garbage collector must run any finalizers of                               objects being freed.
In addition to freeing unreferenced objects, a garbage collector may also combat heap fragmentation. Heap fragmentation occurs                               through the course of normal program execution. New objects are allocated, and unreferenced objects are freed such that free                               blocks of heap memory are left in between blocks occupied by live objects. Requests to allocate new objects may have to be                               filled by extending the size of the heap even though there is enough total unused space in the existing heap. This will happen                               if there is not enough contiguous free heap space available into which the new object will fit. On a virtual memory system,                               the extra paging required to service an ever growing heap can degrade the performance of the executing program.
This article does not describe an official Java garbage-collected heap, because none exists. The JVM specification says only                               that the heap of the Java virtual machine must be garbage collected. The specification does not define how the garbage collector                               must work. The designer of each JVM must decide how to implement the garbage-collected heap. This article describes various                               garbage collection techniques that have been developed and demonstrates a particular garbage collection technique in an applet.
Why garbage collection?
Garbage collection relieves programmers from the burden of freeing allocated memory. Knowing when to explicitly free allocated                               memory can be very tricky. Giving this job to the JVM has several advantages. First, it can make programmers more productive.                               When programming in non-garbage-collected languages the programmer can spend many late hours (or days or weeks) chasing down                               an elusive memory problem. When programming in Java the programmer can use that time more advantageously by getting ahead                               of schedule or simply going home to have a life.
1
